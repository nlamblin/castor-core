#!/usr/bin/env node
/* vim: set ft=javascript: */
"use strict";

var path = require('path')
  , minimist = require('minimist')
  , portfinder = require('portfinder')
  , kuler = require('kuler')
  , os = require('os')
  , pck = require('../package.json')
  , app = require('../app')
  , Configurator = require('../lib/configurator.js')
;


var usage = [
  "Usage: pollux [options...] <path>",
  "",
  "Options:",
  "\t -v, --verbose       Make the operation more talkative",
  "\t -V, --version       Show version number and quit",
  ""
].join("\n");

var argv = minimist(process.argv.slice(2), {
    alias: {
      h: 'help',
      V: 'version',
      v: 'verbose',
      d: 'debug'
    },
    boolean: ['help', 'version', 'verbose', 'debug']
});
if (argv.help) {
  console.info(usage)
  process.exit(0);
}

if (argv.version) {
  console.info(pck.version);
  process.exit(0);
}

if (!argv.verbose) {
  console.log = require('debug')('console:log');
}


//
// Default config parameters
//
var config = new Configurator();
config.fix('connexionURI',         'mongodb://localhost:27017/pollux/');
config.fix('collectionName',       undefined); // auto
config.fix('debug',                false);
config.fix('port',                 '3000');
config.fix('logFormat',            'combined');
config.fix('title',                'Pollux');
config.fix('description',          'Publish & link yours data.>');
config.fix('itemsPerPage',         30);
config.fix('concurrency',          os.cpus().length);
config.fix('writeConcern',         1);
config.fix('delay',                250);
config.fix('authorityName',        undefined);
config.fix('maxFileSize',          undefined);
config.fix('heartrate',            5000);
config.fix('turnoffUpload',        false);
config.fix('filesToIgnore',        [ "**/.*", "~*", "*~", "*.sw?", "*.old", "*.bak", "**/node_modules", "Thumbs.db" ]);
config.fix('tempPath',             os.tmpdir());
config.fix('dataPath',             path.normalize(path.resolve(process.cwd(), path.normalize(argv._[0] || "."))));
config.load('pollux', argv);

portfinder.basePort = config.get('port');
portfinder.getPort(function (err, newport) {
    if (err instanceof Error) {
      console.error(kuler("Unable to get a free port. Try to stop some services.", "red"));
      process.exit(0);
    }
    else {
      config.set('port', newport);
      app(config, function(err, server) {
          if (err instanceof Error) {
            console.error(kuler("Unable to init the server. Try the debug mode with --debug.", "red"));
            process.exit(0);
          }
          else {
            console.info(kuler("Server is listening on http://127.0.0.1:" + server.address().port + "/", "green"));
          }
      });
    }
});
